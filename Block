using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xna.Framework;

namespace WindowsGame1
{
    enum BlockType { Box = 0, L, J, T, Line, S, Z }
    
    public class Block : Microsoft.Xna.Framework.Game
    {

        const int squareSize = 16;
        Vector2[] blockPosition = new Vector2[4];
        Color _color;

        int MaxX = 196;
        int MinX = 56;
        int MaxY = 386;
        BlockType type;
        

        public Block(Random r)
        {
            generateBlock(r);
            initializeBlock();
        }

        public void generateBlock(Random r)
        {
            int rNum = r.Next(0, 7);
            type = (BlockType)rNum;
        }

        public void initializeBlock()
        {
            switch (type)
            {
                case BlockType.Box:
                    blockPosition[0] = new Vector2(100, 50);
                    blockPosition[1] = new Vector2(100 + squareSize, 50);
                    blockPosition[2] = new Vector2(100, 50 + squareSize);
                    blockPosition[3] = new Vector2(100 + squareSize, 50 + squareSize);
                    _color = Color.Black;
                    break;
                case BlockType.J:
                    blockPosition[0] = new Vector2(100, 50);
                    blockPosition[1] = new Vector2(100, 50 + squareSize);
                    blockPosition[2] = new Vector2(100, 50 + squareSize*2);
                    blockPosition[3] = new Vector2(100 - squareSize, 50 + squareSize*2);
                    _color = Color.Red;
                    break;
                case BlockType.L:
                    blockPosition[0] = new Vector2(100, 50);
                    blockPosition[1] = new Vector2(100, 50 + squareSize);
                    blockPosition[2] = new Vector2(100, 50 + squareSize*2);
                    blockPosition[3] = new Vector2(100 + squareSize, 50 + squareSize*2);
                    _color = Color.Yellow;
                    break;
                case BlockType.Line:
                    blockPosition[0] = new Vector2(100, 50);
                    blockPosition[1] = new Vector2(100, 50 + squareSize);
                    blockPosition[2] = new Vector2(100, 50 + squareSize*2);
                    blockPosition[3] = new Vector2(100, 50 + squareSize*3);
                    _color = Color.Orange;
                    break;
                case BlockType.T:
                    blockPosition[0] = new Vector2(100, 50);
                    blockPosition[1] = new Vector2(100 - squareSize, 50);
                    blockPosition[2] = new Vector2(100 + squareSize, 50);
                    blockPosition[3] = new Vector2(100, 50 + squareSize);
                    _color = Color.LimeGreen;
                    break;
                case BlockType.S:
                    blockPosition[0] = new Vector2(100, 50);
                    blockPosition[1] = new Vector2(100 + squareSize, 50);
                    blockPosition[2] = new Vector2(100, 50 + squareSize);
                    blockPosition[3] = new Vector2(100 - squareSize, 50 + squareSize);
                    _color = Color.Purple;
                    break;
                case BlockType.Z:
                    blockPosition[0] = new Vector2(100, 50);
                    blockPosition[1] = new Vector2(100 - squareSize, 50);
                    blockPosition[2] = new Vector2(100, 50 + squareSize);
                    blockPosition[3] = new Vector2(100 + squareSize, 50 + squareSize);
                    _color = Color.SeaShell;
                    break;
            }
        }

        public Color getColor()
        {
            return _color;
        }

        public Vector2 getPos(int pos)
        {
            return blockPosition[pos];
        }

        public void blockFall()
        {
            if (!bottom())
            {
                for (int i = 0; i < 4; i++)
                {
                    blockPosition[i].Y += squareSize;
                }
            }           
        }

        public Boolean bottom()
        {
            for (int i = 0; i < 4; i++)
            {
                if (blockPosition[i].Y >= MaxY)
                    return true;
            }
            return false;
        }

        public Boolean leftWallCheck()
        {
            for (int i = 0; i < 4; i++)
            {
                if (blockPosition[i].X <= MinX)
                    return true;
            }
            return false;
        }

        public Boolean rightWallCheck()
        {
            for (int i = 0; i < 4; i++)
            {
                if (blockPosition[i].X >= MaxX)
                    return true;
            }
            return false;
        }

        public void shiftLeft()
        {
            for (int i = 0; i < 4; i++)
            {
                blockPosition[i].X -= squareSize;
            }
        }

        public void shiftRight()
        {
            for (int i = 0; i < 4; i++)
            {
                blockPosition[i].X += squareSize;
            }
        }
    }
}
